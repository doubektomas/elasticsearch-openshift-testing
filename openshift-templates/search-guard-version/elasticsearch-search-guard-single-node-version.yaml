apiVersion: v1
kind: Template
metadata:
  name: elasticsearch-search-guard-single-node
objects:
- kind: SecurityContextConstraints
  apiVersion: v1
  metadata:
    name: elasticsearch-scc
  allowPrivilegedContainer: true
  runAsUser:
    type: RunAsAny
  seLinuxContext:
    type: RunAsAny
  fsGroup:
    type: RunAsAny
  supplementalGroups:
    type: RunAsAny
  allowedCapabilities:
    - IPC_LOCK
    - SYS_RESOURCE
  users:
  - system:serviceaccount:${NAMESPACE}:default

- kind: ConfigMap
  apiVersion: v1
  metadata:
    annotations:
      kompose.cmd: kompose --provider openshift convert -f docker-compose.yml --emptyvols
      kompose.version: 1.1.0 (36652f6)
    labels:
      io.kompose.service: elasticsearch
    name: search-guard-configs
  data:
  ####### USERS
    sg_internal_users.yml: |
      # This is the internal user database
      # The hash value is a bcrypt hash and can be generated with plugins/search-guard-6/tools/hash.sh
      # For example: $ plugins/search-guard-6/tools/hash.sh -p welcome

      #password is: admin
      admin:
        readonly: true
        hash: $2a$12$VcCDgh2NDk07JGN0rjGbM.Ad41qVR/YFJcgHp0UGns5JDymv..TOG
        roles:
          - admin

      #password is: logstash
      logstash:
        hash: $2a$12$u1ShR4l4uBS3Uv59Pa2y5.1uQuZBrZtmNfqB3iM/.jL0XoV9sghS2
        roles:
          - logstash

      #password is: kibanaserver
      kibanaserver:
        readonly: true
        hash: $2a$12$4AcgAt3xwOWadA5s5blL6ev39OXDNhmOesEoo33eZtrq2N0YrU3H.

      #password is: kibanaro
      kibanaro:
        hash: $2a$12$JJSXNfTowz7Uu5ttXfeYpeYE0arACvcwlPBStB1F.MI7f0U9Z4DGC
        roles:
          - kibanauser
          - readall

      #password is: readall
      readall:
        hash: $2a$12$ae4ycwzwvLtZxwZ82RmiEunBbIPiAmGZduBAjKN0TXdwQFtCwARz2
        #password is: readall
        roles:
          - readall

      #password is: snapshotrestore
      snapshotrestore:
        hash: $2y$12$DpwmetHKwgYnorbgdvORCenv4NAK8cPUg8AI6pxLCuWf/ALc0.v7W
        roles:
          - snapshotrestore
  ####### ROLES
    sg_roles.yml: |
      # Allows everything, but no changes to searchguard configuration index
      sg_all_access:
        readonly: true
        cluster:
          - UNLIMITED
        indices:
          '*':
            '*':
              - UNLIMITED
        tenants:
          admin_tenant: RW

      # Read all, but no write permissions
      sg_readall:
        readonly: true
        cluster:
          - CLUSTER_COMPOSITE_OPS_RO
        indices:
          '*':
            '*':
              - READ

      # Read all and monitor, but no write permissions
      sg_readall_and_monitor:
        cluster:
          - CLUSTER_MONITOR
          - CLUSTER_COMPOSITE_OPS_RO
        indices:
          '*':
            '*':
              - READ

      # For users which use kibana, access to indices must be granted separately
      sg_kibana_user:
        readonly: true
        cluster:
          - INDICES_MONITOR
          - CLUSTER_COMPOSITE_OPS
        indices:
          '?kibana':
            '*':
              - MANAGE
              - INDEX
              - READ
              - DELETE
          '?kibana-6':
            '*':
              - MANAGE
              - INDEX
              - READ
              - DELETE
          '*':
            '*':
              - indices:data/read/field_caps*

      # For the kibana server
      sg_kibana_server:
        readonly: true
        cluster:
            - CLUSTER_MONITOR
            - CLUSTER_COMPOSITE_OPS
            - cluster:admin/xpack/monitoring*
            - indices:admin/template*
        indices:
          '?kibana':
            '*':
              - INDICES_ALL
          '?kibana-6':
            '*':
              - INDICES_ALL
          '?reporting*':
            '*':
              - INDICES_ALL
          '?monitoring*':
            '*':
              - INDICES_ALL

      # For logstash and beats
      sg_logstash:
        cluster:
          - CLUSTER_MONITOR
          - CLUSTER_COMPOSITE_OPS
          - indices:admin/template/get
          - indices:admin/template/put
        indices:
          'logstash-*':
            '*':
              - CRUD
              - CREATE_INDEX
          '*beat*':
            '*':
              - CRUD
              - CREATE_INDEX

      # Allows adding and modifying repositories and creating and restoring snapshots
      sg_manage_snapshots:
        cluster:
          - MANAGE_SNAPSHOTS
        indices:
          '*':
            '*':
              - "indices:data/write/index"
              - "indices:admin/create"

      # Allows each user to access own named index
      sg_own_index:
        cluster:
          - CLUSTER_COMPOSITE_OPS
        indices:
          '${user_name}':
            '*':
              - INDICES_ALL

  ####### MAPPING
    sg_roles_mapping.yml: |
      # In this file users, backendroles and hosts can be mapped to Search Guard roles.
      # Permissions for Search Guard roles are configured in sg_roles.yml

      sg_all_access:
        readonly: true
        backendroles:
          - admin

      sg_logstash:
        backendroles:
          - logstash

      sg_kibana_server:
        readonly: true
        users:
          - kibanaserver

      sg_kibana_user:
        backendroles:
          - kibanauser

      sg_readall:
        readonly: true
        backendroles:
          - readall

      sg_manage_snapshots:
        readonly: true
        backendroles:
          - snapshotrestore

      sg_own_index:
        users:
          - '*'

- kind: ConfigMap
  apiVersion: v1
  metadata:
    annotations:
      kompose.cmd: kompose --provider openshift convert -f docker-compose.yml --emptyvols
      kompose.version: 1.1.0 (36652f6)
    labels:
      io.kompose.service: elasticsearch
    name: elasticsearch-config
  data:
    elasticsearch.yml: |
      ---
      cluster.name: "${CLUSTER_NAME}"
      network.host: 0.0.0.0
      http.port: 9202
      transport.port: 9301
      discovery.zen.minimum_master_nodes: 1
      discovery.type: single-node

- apiVersion: v1
  kind: ConfigMap
  metadata:
    annotations:
      kompose.cmd: kompose --provider openshift convert -f docker-compose.yml --emptyvols
      kompose.version: 1.1.0 (36652f6)
    labels:
      io.kompose.service: kibana
    name: kibana-config
  data:
    kibana.yml: |
      ---
      server.name: kibana
      server.host: "0"
      server.port: 5602
      #elasticsearch.url: http://elasticsearch:9202
      elasticsearch.hosts: ["http://elasticsearch:9202"]

      ## Custom configuration
      elasticsearch.username: "${ELASTICSEARCH_USERNAME}"
      elasticsearch.password: "${ELASTICSEARCH_PASSWORD}"

- apiVersion: apps/v1
  kind: StatefulSet
  metadata:
    annotations:
      template.alpha.openshift.io/wait-for-ready: "true"
    labels:
      io.kompose.service: elasticsearch
    name: elasticsearch
  spec:
    replicas: 1
    selector:
      matchLabels:
        io.kompose.service: elasticsearch
    serviceName: elasticsearch
    template:
      metadata:
        labels:
          io.kompose.service: elasticsearch
      spec:
        initContainers:
        - command:
          - sysctl
          - -w
          - vm.max_map_count=262144
          image: busybox:1.27.2
          imagePullPolicy: IfNotPresent
          name: init-sysctl
          resources: {}
          securityContext:
            privileged: true
        containers:
        - env:
          - name: node.data
            value: "true"
          - name: node.master
            value: "true"
          - name: node.ingest
            value: "true"
          - name: node.name
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: node.max_local_storage_nodes
            value: "1"
          - name: processors
            valueFrom:
              resourceFieldRef:
                resource: limits.cpu
          - name: discovery.zen.minimum_master_nodes
            value: "1"
          - name: ES_JAVA_OPTS
            value: -Xms1024m -Xmx1024m
          - name: bootstrap.memory_lock
            value: "false"
          #image: ${ELASTICSEARCH_IMAGE}
          image: docker.elastic.co/elasticsearch/elasticsearch-oss:7.10.2
          imagePullPolicy: IfNotPresent
          # lifecycle:
          #   postStart:
          #     exec:
          #       command:
          #       - sh
          #       - -c
          #       - sleep 20 && /usr/share/elasticsearch/bin/elasticsearch.sh
          livenessProbe:
            failureThreshold: 3
            httpGet:
              httpHeaders:
              - name: Authorization
                value: Basic ${LIVENESSPROBE_CREDENTIALS}
              path: /_cluster/health
              port: http
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: elasticsearch
          ports:
          - containerPort: 9202
            name: http
            protocol: TCP
          - containerPort: 9301
            name: transport
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            initialDelaySeconds: 1
            periodSeconds: 3
            successThreshold: 1
            tcpSocket:
              port: transport
            timeoutSeconds: 1
          resources:
            limits:
              cpu: "1"
              memory: 2Gi
            requests:
              cpu: 500m
              memory: 1Gi
          volumeMounts:
          - mountPath: /usr/share/elasticsearch/data
            name: storage
          - mountPath: /usr/share/elasticsearch/config/elasticsearch.yml
            name: elasticsearch-config
            subPath: elasticsearch.yml
          - mountPath: /usr/share/elasticsearch/config/sgconfig/sg_internal_users.yml
            name: search-guard-configs
            subPath: sg_internal_users.yml
          - mountPath: /usr/share/elasticsearch/config/sgconfig/sg_roles.yml
            name: search-guard-configs
            subPath: sg_roles.yml
          - mountPath: /usr/share/elasticsearch/config/sgconfig/sg_roles_mapping.yml
            name: search-guard-configs
            subPath: sg_roles_mapping.yml
          securityContext:
            capabilities:
              add: ["SYS_CHROOT"]
        restartPolicy: Always
        volumes:
        - configMap:
            defaultMode: 420
            name: elasticsearch-config
          name: elasticsearch-config
        - configMap:
            defaultMode: 384
            name: search-guard-configs
          name: search-guard-configs
    volumeClaimTemplates:
    - metadata:
        name: storage
      spec:
        accessModes:
        - ReadWriteOnce
        resources:
          requests:
            storage: ${ELASTICSEARCH_VOLUME_CAPACITY}
        storageClassName: ${STORAGECLASSNAME}
    triggers:
    - type: ConfigChange
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    annotations:
      kompose.cmd: kompose --provider openshift convert -f docker-compose.yml --emptyvols
      kompose.version: 1.1.0 (36652f6)
    labels:
      io.kompose.service: kibana
    name: kibana
  spec:
    replicas: 1
    selector:
      io.kompose.service: kibana
    strategy:
      resources: {}
      type: Rolling
    template:
      metadata:
        labels:
          io.kompose.service: kibana
      spec:
        containers:
        #- image: ${KIBANA_IMAGE}
        - image: docker.elastic.co/kibana/kibana-oss:7.10.2
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              httpHeaders:
              - name: Authorization
                value: Basic ${LIVENESSPROBE_CREDENTIALS}
              path: /status
              port: http
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: kibana
          ports:
          - containerPort: 5602
            name: http
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            initialDelaySeconds: 7
            periodSeconds: 3
            successThreshold: 1
            tcpSocket:
              port: http
            timeoutSeconds: 1
          resources:
            limits:
              cpu: "1"
              memory: 256Mi
            requests:
              cpu: 100m
              memory: 128Mi
          volumeMounts:
          - mountPath: /usr/share/kibana/config/kibana.yml
            name: kibana-config
            subPath: kibana.yml
          securityContext:
            capabilities:
              add: ["SYS_CHROOT"]
        restartPolicy: Always
        volumes:
        - configMap:
            defaultMode: 420
            name: kibana-config
          name: kibana-config
    triggers:
    - type: ConfigChange
- apiVersion: v1
  kind: Route
  metadata:
    annotations:
    labels:
      io.kompose.service: elasticsearch
    name: elasticsearch
  spec:
    host: ${ELASTICSEARCH_URL}
    port:
      targetPort: "9202"
    tls:
      insecureEdgeTerminationPolicy: Redirect
      termination: edge
    to:
      kind: Service
      name: elasticsearch
      weight: 100
    wildcardPolicy: None
- apiVersion: v1
  kind: Route
  metadata:
    annotations:
      kompose.cmd: kompose --provider openshift convert -f docker-compose.yml --emptyvols
      kompose.version: 1.1.0 (36652f6)
    labels:
      io.kompose.service: kibana
    name: kibana
  spec:
    host: ${KIBANA_URL}
    port:
      targetPort: "5602"
    tls:
      insecureEdgeTerminationPolicy: Redirect
      termination: edge
    to:
      kind: Service
      name: kibana
      weight: 100
    wildcardPolicy: None
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kompose.cmd: kompose --provider openshift convert -f docker-compose.yml --emptyvols
      kompose.version: 1.1.0 (36652f6)
    labels:
      io.kompose.service: elasticsearch
    name: elasticsearch
  spec:
    ports:
    - name: "9202"
      port: 9202
      protocol: TCP
      targetPort: 9202
    - name: "9301"
      port: 9301
      protocol: TCP
      targetPort: 9301
    selector:
      io.kompose.service: elasticsearch
    type: ClusterIP
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kompose.cmd: kompose --provider openshift convert -f docker-compose.yml --emptyvols
      kompose.version: 1.1.0 (36652f6)
    labels:
      io.kompose.service: kibana
    name: kibana
  spec:
    ports:
    - name: "5602"
      port: 5602
      protocol: TCP
      targetPort: 5602
    selector:
      io.kompose.service: kibana
    type: ClusterIP

parameters:
  - name: NAMESPACE
    displayName: Your project's namespace
    required: true 
  - name: CLUSTER_NAME
    displayName: Cluster name (cluster.name)
    value: docker-cluster
    required: true 
  - name: ELASTICSEARCH_USERNAME
    displayName: Internal Kibana server user, for configuring elasticsearch.username in kibana.yml
    value: kibanaserver
    required: true 
  - name: ELASTICSEARCH_PASSWORD
    displayName: Internal Kibana server user, for configuring elasticsearch.password in kibana.yml
    value: kibanaserver
    required: true 
  - name: LIVENESSPROBE_CREDENTIALS
    displayName: username & password for liveness probes (default => kibanaserver:kibanaserver)
    description: use 'echo -n "kibanaserver:kibanaserver" | base64' to create the string. ref- https://stackoverflow.com/a/43948832
    value: a2liYW5hc2VydmVyOmtpYmFuYXNlcnZlcg==
    required: true 
  - name: STORAGECLASSNAME
    displayName: Your storage class name (storageClassName) used in your cluster
    value: standard
    required: true
  - name: ELASTICSEARCH_VOLUME_CAPACITY
    displayName: Volume space available for data, e.g. 512Mi, 2Gi.
    value: 10Gi
    required: true
  - name: ELASTICSEARCH_IMAGE
    displayName: Elasticsearch image to use
    value: docker.io/jefferyb/openshift-elastic:elasticsearch-oss-6.3.0-searchguard-22.3
    required: true
  - name: KIBANA_IMAGE
    displayName: Kibana image to use
    value: docker.io/jefferyb/openshift-elastic:kibana-oss-6.3.0-searchguard-13
    required: true
  - name: ELASTICSEARCH_URL
    displayName: Kibana image to use
    required: true 
  - name: KIBANA_URL
    displayName: Kibana image to use
    required: true 
